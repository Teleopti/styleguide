label {
    display: inline !important;
    font-weight: normal;
}

input[type='text'],
[type='number'],
input[type='password'],
select {
    border: none;
    color: $text-color-standard;
    -webkit-appearance: none;
    -moz-appearance: none;
    background: none;
    line-height: 1;
    cursor: pointer;
    height: 20px;
    border-bottom: 1px solid $hover;

    &:focus {
        border: none;
        outline: none;
        border-bottom: 1px solid $secondary;
    }
}

.wfm-form input,
.wfm-form select {
    margin: 0 !important;
}

textarea {
    background-color: $white;
    color: $text-color-standard;
    resize: vertical;
    width: 100%;
}

input::-ms-clear {
    display: none;
}

select:after {
    width: 0;
    height: 0;
    padding: 0;
    content: '';
    border-left: 0.25em solid transparent;
    border-right: 0.25em solid transparent;
    border-top: 0.375em solid red;
    pointer-events: none;
}

.md-ink-ripple:before {
    background-color: transparent !important;
}

// Input
//
//Standard inputs dont need any added style. If you want to build a form with several inputs and actions on submit, please look at the <a href=section-4.html#kssref-4-4>form layout</a>.
//
//Note:  &lt;br/&gt; tags are for styleguide demo purpose only.
//
//Markup:
//	<input type="text" placeholder="Name..."  />
// <br/>
// <br/>
//	<input type="password" placeholder="Password..." />
// <br/>
// <br/>
//	<input type="number" placeholder="Numbers..." />
//
//Styleguide 1.4
//

// Input with prepend
//
//Inputs with prepend icon can be used when the input effects something that can easily be represented by an icon. This way we can rely on it taking up the same space in all languages.
//However, don't mix standard inputs and prepend ones. These inputs should have a placeholder and maybe a tooltip for explanation, since the icon is used in place of a label.
//
//Markup:
//<label for="filter" class="input-icon">
//  <i class="mdi mdi-filter-outline">
//    <input type="text" id="filter" placeholder="filter roles...">
//    <md-tooltip>Filter</md-tooltip>
//  </i>
//</label>
//
//Styleguide 1.5
//

.input-icon i {
    display: inline-flex;
    display: -ms-inline-flexbox;
    width: 100%;
}
.input-icon input {
    margin-left: 5px;
    width: 100%;
    font-style: normal !important;
}

/*Deprecated*/
.input-prepend {
    width: 100%;

    i {
        display: inline-block;
        width: 18px;
        cursor: pointer;
        color: $text-color-standard;

        &:before {
            vertical-align: sub;
        }
    }

    input[type='text'] {
        display: inline-block;
        width: auto;
    }
}

// File upload
//
//Let users import data from files to cuts down on a lot of maual entry.
//
//Markup:
//<label class="fileUpload">
//    <input id="uploadBtnId" type="file" class="upload" value="" onchange="javascript:document.getElementById('uploadFile').value = this.files[0].name;" />
//    <i class="mdi mdi-file-outline uploadBtn">
//		<md-tooltip>Import a file</md-tooltip>
//		</i>
//</label>
//<input id="uploadFile" class="disableInputField" disabled="disabled" value="No file selected" />
//
//Styleguide 1.6
//

.disableInputField {
    display: inline-block;
    background: none;
    border: none;
    outline: none;
    width: 50%;
    margin: 0;
    text-overflow: ellipsis;
}

.fileUpload {
    position: relative;
    overflow: hidden;
    display: inline-block;
    vertical-align: top;
}

.uploadBtn {
    display: inline-block;
    line-height: 22px;
    cursor: pointer;
    margin: 5px;
}

.fileUpload input.upload {
    position: absolute;
    top: 0;
    right: 0;
    width: 0;
    margin: 0;
    padding: 0;
    opacity: 0;
    filter: alpha(opacity = 0);
}

::-webkit-input-placeholder {
    /* WebKit browsers */
    color: $text-color-muted;
}

:-moz-placeholder {
    /* Mozilla Firefox 4 to 18 */
    color: $text-color-muted;
    opacity: 1;
}

::-moz-placeholder {
    /* Mozilla Firefox 19+ */
    color: $text-color-muted;
    opacity: 1;
}

input:-ms-input-placeholder {
    /* Internet Explorer 10+ */
    color: $text-color-muted;
}

/*Form validation*/
.wfm-form {
    label {
        cursor: pointer !important;
        color: $text-color-standard;
        display: inline-block !important;
    }

    input,
    select {
        max-width: 100%;
        margin-right: 100%;
    }

    input > .ng-invalid {
        border-bottom: 5px solid red !important;
    }

    input[type='text'],
    input[type='number'],
    input[type='password'],
    input[type='email'] {
        padding: 0 0 0 4px !important;
    }

    select {
        padding: 0 0 0 0;
    }

    .form-input-message {
        opacity: 0;
        height: 0;
        transition: $transition-timing;
    }

    .formInvalidInput {
        opacity: 1;
        height: auto;
        color: red !important;
    }

    .form-input-wrap {
        padding: 10px 0;
    }

    .animate-input-message {
        line-height: 20px;
        height: auto;
        opacity: 1;
    }

    .animate-input-message.ng-hide-add,
    .animate-input-message.ng-hide-remove {
        transition: $transition-timing;
    }

    .animate-input-message.ng-hide {
        line-height: 0;
        height: 0;
        opacity: 0;
    }
}

.form-panel {
    overflow-x: hidden;
}

// Select
//
// The select is used to provide many options to the user and make complex selections simpler.
//
// Note: The ng-bind is for styleguide demo purpose only, use <span style="word-spacing: -4px;">{ {item} }</span> in the project.
//
// Markup:
//	<md-select ng-model="model" placeholder="Pick an option">
//		<md-option ng-repeat="item in demos" ng-value="item.id"><span ng-bind="item.id"></span></md-option>
//	</md-select>
//
//Styleguide 1.7
//

//z index needs to be higher than 81
.md-select-menu-container {
    background: $white !important;
    z-index: 1000;

    .md-active {
        z-index: 150;
    }
}

md-select:not([disabled]):focus .md-select-value {
    border: none;
    outline: none;
    padding-bottom: 1px;
    border-bottom: 1px solid $hover;
}

.md-select-value > span:not(.md-select-icon) {
    white-space: normal;
}

md-select-menu {
    md-select:not([disabled]):focus .md-select-value,
    md-option[selected],
    md-content {
        color: inherit !important;
    }
    md-option {
        height: 30px;
        color: $text-color-standard;
    }
    md-option:focus:not([disabled]):not([selected]),
    md-option[selected],
    md-select-menu md-option[selected]:focus {
        background: $secondary !important;
    }
}

md-select {
    margin: 0 !important;

    .md-select-label {
        padding: 0;
        height: 21px;
    }

    &:not([disabled]):focus .md-select-value {
        color: inherit !important;
    }
}

.inline-select {
    margin-top: -5px !important;
    margin-left: 5px !important;
}

.bu-select {
    margin-top: -5px;
}

// Skill picker
//
// The skill picker is used to switch between selected skills and selected skill groups.
// <table class="wfm-table">
//     <thead>
//         <tr>
//             <th>Attribute Name</th>
//             <th>Usage</th>
//         </tr>
//     </thead>
//     <tbody>
//         <tr>
//             <td>skills</td>
//             <td>Model for binding skills. Array of skill objects</td>
//         </tr>
//         <tr>
//             <td>skill-groups</td>
//             <td>Model for binding skill groups. Array of skillgroup objects</td>
//         </tr>
//         <tr>
//             <td>skill-picker-open</td>
//             <td>Property for showing and hiding the drop-down with skills. Boolean. Optional</td>
//         </tr>
//         <tr>
//             <td>skill-group-picker-open</td>
//             <td>Property for showing and hiding the drop-down with skillgroups. Boolean. Optional</td>
//         </tr>
//         <tr>
//             <td>on-skill-selected</td>
//             <td>Callback function triggered when a skill is selected. The selected skill object as the only argument.</td>
//         </tr>
//         <tr>
//             <td>on-skill-group-selected</td>
//             <td>Callback function triggered when a skillgroup is selected. The selected skillgroup object as the only argument.</td>
//         </tr>
//         <tr>
//             <td>preselected-skill</td>
//             <td>Skill object to be displayed as the component loads</td>
//         </tr>
//         <tr>
//             <td>preselected-skill-group</td>
//             <td>Skillgroup object to be displayed as the component loads</td>
//         </tr>
//         <tr>
//             <td>on-clear-skill-selection</td>
//             <td>Callback function triggered when clearing the skill selection with x.</td>
//         </tr>
//         <tr>
//             <td>on-clear-skill-group-selection</td>
//             <td>Callback function triggered when clearing the skillgroup selection with x.</td>
//         </tr>
//     </tbody>
// </table>
// <div class="jsprewrap">
//   <div class="ksscopy kss-style" ng-click="showJs['skillPicker'] = !showJs['skillPicker']">
//       <span ng-hide="showJs['skillPicker']">Show</span>
//      <span ng-show="showJs['skillPicker']">Hide</span>
//     JavaScript
//     <i class="mdi mdi-code-tags pull-right"></i>
//   </div>
//   <div class="animate-show" ng-show="showJs['skillPicker']">
//     <code>
//       <pre class="prettyprint linenums lang-js">
// &nbsp;
// $scope.mockSkills = [
//  {
//    Id: 'XYZ',
//    Name: 'skill1'
//  },
//  {
//    Id: 'ABC',
//    Name: 'skill2'
//  },
//  {
//    Id: 'XYZ1',
//    Name: 'skill3'
//  },
//  {
//    Id: 'ABC2',
//    Name: 'skill4'
//  },
//  {
//    Id: 'XYZ3',
//    Name: 'skill5'
//  },
//  {
//    Id: 'ABC4',
//    Name: 'skill6'
//  },
//  {
//    Id: 'XYZ5',
//    Name: 'skill7'
//  },
//  {
//    Id: 'ABC6',
//    Name: 'skill8'
//  }
//];
//
//$scope.mockedSkillGroups = [
//  {
//    Name: 'SkillArea1',
//    Id: '123',
//    Skills: [
//      {
//        Id: 'XYZ',
//        Name: 'skill1'
//      }
//    ]
//  },
//  {
//    Name: 'SkillArea2',
//    Id: '321',
//    Skills: [
//      {
//        Id: 'ABC',
//        Name: 'skill2'
//      }
//    ]
//  }
//];
//       </pre>
//     </code>
//   </div>
// </div>
//
// Markup:
// <the-skill-picker class="con-flex"
//      skills="mockSkills"
//      skill-groups="mockedSkillGroups"
//      skill-picker-open="skillPickerOpen"
//      skill-group-picker-open="skillGroupPickerOpen"
//      on-skill-selected="clickedSkillInPicker(skill)"
//      on-skill-group-selected="clickedSkillGroupInPicker(skillGroup)"
//      preselected-skill="selectedSkill"
//      preselected-skill-group="selectedSkillGroup"
//      on-clear-skill-selection="clearSkillSelection()"
//      on-clear-skill-group-selection="clearSkillGroupSelection()">
// </the-skill-picker>
//<p ng-if="selectedSkill">Selected skill: <span ng-bind="selectedSkill.Name"></span></p>
//<p ng-if="selectedSkillGroup">Selected skillgroup: <span ng-bind="selectedSkillGroup.Name"></span></p>
//
//Styleguide 2.13
//

// Skill picker - old
//
//This will be soon depricated, we are keeping it for now for backwards compatibility. Please use the new one.
//The skill picker is used to switch between selected skills and selected skill groups.
//<table class="wfm-table">
//	<thead>
//		<tr>
//			<th>Attribute Name</th>
//			<th>Usage</th>
//		</tr>
//	</thead>
//	<tbody>
//		<tr>
//			<td>skills</td>
//			<td>Model for binding skills</td>
//		</tr>
//		<tr>
//			<td>skill-areas</td>
//			<td>Model for binding skill groups</td>
//		</tr>
//    <tr>
//      <td>item-to-return</td>
//      <td>The currently selected item (skill or group) returned as a callback function</td>
//    </tr>
//    <tr>
//      <td>preselected</td>
//      <td>Send the id of a skill that should be preselected on load</td>
//    </tr>
//	</tbody>
//</table>
// <div class="jsprewrap">
//   <div class="ksscopy kss-style" ng-click="showJs['skillPickerOld'] = !showJs['skillPickerOld']">
//       <span ng-hide="showJs['skillPickerOld']">Show</span>
//      <span ng-show="showJs['skillPickerOld']">Hide</span>
//     JavaScript
//     <i class="mdi mdi-code-tags pull-right"></i>
//   </div>
//   <div class="animate-show" ng-show="showJs['skillPickerOld']">
//     <code>
//       <pre class="prettyprint linenums lang-js">
// &nbsp;
//$scope.preselectedSkillOld = { skillIds: ['XYZ1'] };
//$scope.preselectedSkillGroupOld = { skillAreaId: ['XYZ'] };
//
//$scope.outputOld = function(selectedItem) {
//$scope.filterOutputOld = selectedItem;
//};
//       </pre>
//     </code>
//   </div>
// </div>
//
// Markup:
//<skill-picker skills="mockSkillsOld" skill-areas="mockedSkillGroupsOld" item-to-return="outputOld" preselected-item="preselectedSkillOld"></skill-picker>
//<p ng-if="filterOutputOld">Selected skill/group: <span ng-bind="filterOutputOld.Name"></span></p>
//
//Styleguide 2.14
//

@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    .hide-on-ie {
        display: none !important;
    }

    .ie-cross {
        display: inline !important;
        float: right;
        margin-top: -20px;
    }
}

.ie-cross {
    display: none;
}

md-autocomplete {
    color: $text-color-standard;
    background: transparent;
    height: 30px;
    border-bottom: 1px solid $hover;

    input:not(.md-input) {
        padding: 0;
    }

    button:after {
        display: none;
    }

    button md-icon {
        transform: translate3d(-50%, -50%, 0) scale(0.7);
    }
}

.md-whiteframe-1dp,
.md-whiteframe-z1 {
    box-shadow: none;
}

.md-virtual-repeat-scroller {
    background: $white;
}

md-autocomplete-parent-scope {
    color: $text-color-standard;
}
.md-autocomplete-suggestions > li {
    color: $text-color-standard;

    &:hover {
        background: $hover !important;
    }
}

md-autocomplete[disabled] {
    background: $hover;

    input {
        cursor: not-allowed !important;
    }
}

.wfm-form > md-autocomplete-wrap > input {
    margin-right: 0 !important;
}

.md-autocomplete-suggestions-container {
    margin-bottom: $full-padding !important;
    li .highlight {
        color: $text-color-standard !important;
        font-weight: bold;
    }
}

md-select-menu md-content md-option:not([disabled]):hover,
md-autocomplete[disabled]:not([md-floating-label]),
.md-autocomplete-suggestions-container li.selected {
    background: $hover !important;
}

// fix for IE: clear buttom cause item list dont open
// .md-virtual-repeat-container.md-autocomplete-suggestions-container {
//   height: 225.5px !important;
// }

// Radio button
//
// Radio buttons are a group of options that can only have one item selected at a time.
//
// <div class="jsprewrap">
//   <div class="ksscopy kss-style" ng-click="showJs['radio'] = !showJs['radio']">
//       <span ng-hide="showJs['radio']">Show</span>
//      <span ng-show="showJs['radio']">Hide</span>
//     JavaScript
//     <i class="mdi mdi-code-tags pull-right"></i>
//   </div>
//   <div class="animate-show" ng-show="showJs['radio']">
//     <code>
//       <pre class="prettyprint linenums lang-js">
//
//	  $scope.demos = [{id: '1'}, {id: '2'}, {id: '3'}, {id: '4'}];
//       </pre>
//     </code>
//   </div>
// </div>
//
//Markup:
//<h3>Simple (<span ng-bind="data1"></span>)</h3>
//<form>
//  <md-radio-group ng-model="data1">
//    <md-radio-button value="Option 1" aria-label="radio">Option 1</md-radio-button>
//    <md-radio-button value="Option 2" aria-label="radio">Option 2</md-radio-button>
//    <md-radio-button value="Option 3" aria-label="radio">Option 3</md-radio-button>
//  </md-radio-group>
// <h3>Repeated (<span ng-bind="data2"></span>)</h3>
//  <md-radio-group ng-model="data2">
//    <md-radio-button ng-repeat="item in demos" ng-value="item.id" aria-label="{{item.id}}">
//     Option <span ng-bind="item.id"></span>
//    </md-radio-button>
//  </md-radio-group>
//</form>
//
//Styleguide 1.8
//

md-radio-group {
    .md-off {
        border: none !important;
    }
    .md-on {
        transform: scale(1) !important;
        background-color: transparent;
    }
}
md-radio-button {
    margin: $full-padding 0;
    .md-container:before {
        background: $hover;
    }
    .md-container {
        background: $hover;
        border-radius: 50%;
    }
}
md-radio-group .md-checked .md-on {
    background-color: $secondary !important;
}

.wfm-radio {
    //depricated, remove as soon as possible
    @extend .wfm-block;

    input[type='radio'] {
        display: none;
    }

    .wfm-radio-toggle {
        position: absolute;
        background-color: $hover;
        width: 20px;
        height: 20px;
        border-radius: 40px;
        transition: $transition-timing;
        cursor: pointer;
    }

    input[type='radio']:checked ~ label .wfm-radio-toggle,
    input[type='radio']:checked ~ .wfm-radio-toggle {
        background-color: $secondary;
    }

    .wfm-radio-label {
        margin-left: 20px + $full-padding;
        white-space: nowrap;
        cursor: pointer;
    }
}

//Checkbox
//
//Checkboxes are used for selecting multiple input options.
//
// <div class="jsprewrap">
//   <div class="ksscopy kss-style" ng-click="showJs['check'] = !showJs['check']">
//       <span ng-hide="showJs['check']">Show</span>
//      <span ng-show="showJs['check']">Hide</span>
//     JavaScript
//     <i class="mdi mdi-code-tags pull-right"></i>
//   </div>
//   <div class="animate-show" ng-show="showJs['check']">
//     <code>
//       <pre class="prettyprint linenums lang-js">
//
//	  $scope.demos = [{id: '1'}, {id: '2'}, {id: '3'}, {id: '4'}];
//       </pre>
//     </code>
//   </div>
// </div>
//
//Markup:
//  <h3>Simple</h3>
//  <md-checkbox ng-model="checkData1" aria-label="Checkbox">Option 1</md-checkbox>
//  <md-checkbox ng-model="checkData2" aria-label="Checkbox">Option 2</md-checkbox>
//  <md-checkbox ng-model="checkData3" aria-label="Checkbox">Option 3</md-checkbox>
//  <h3>Repeated</h3>
//  <md-checkbox ng-repeat="item in demos" ng-model="item.checked" aria-label="Checkbox">Option <span ng-bind="item.id"></span></md-checkbox>
//
//Styleguide 1.9
//

md-checkbox {
    display: block;
    margin: $full-padding 0;
    .md-icon {
        border-width: 0;
        border-style: solid;
        border-color: transparent;
        border-radius: 0;
        background-color: $hover;
    }

    &.md-checked .md-icon {
        background-color: $secondary;
        &:after {
            border-color: $text-color-standard;
            left: 7px;
            top: 1px;
        }
    }
}

.wfm-checkbox {
    //Depricated remove as soon as possible
    @extend .wfm-block;

    input[type='checkbox'] {
        display: none;
    }

    .wfm-checkbox-toggle:after {
        position: absolute;
        background-color: $gray026;
        width: 20px;
        height: 20px;
        float: right;
        border-radius: 2px;
        content: ' ';
        transition: $transition-timing;
        cursor: pointer;
    }

    input[type='checkbox']:checked ~ label .wfm-checkbox-toggle:after,
    input[type='checkbox']:checked ~ .wfm-checkbox-toggle:after {
        background-color: $blue-300;
        content: '✓';
        text-align: center;
        color: $white;
    }

    input[type='checkbox']:focus ~ label .wfm-checkbox-toggle:after,
    input[type='checkbox']:focus ~ .wfm-checkbox-toggle:after {
        @extend .material-trench-1;
    }

    .wfm-checkbox-label {
        margin-left: 20px + $full-padding;
        white-space: nowrap;
        cursor: pointer;
    }
}

//Switch
//
// The switch is used to toggle between two states (for example show/hide, using <a href="http://goo.gl/M5U1oC">Angulars ng-show or ng-hide</a> to toggle other elements).
//
//Markup:
//<md-switch ng-model="switchData1" aria-label="Switch">
// <span ng-if="!switchData1">Toggle me</span>
// <span ng-if="switchData1">Thanks!</span>
//</md-switch>
//
//Styleguide 1.10
//
md-switch {
    .md-bar {
        height: 18px;
        top: 3px;
        background-color: $hover;
    }
    &.md-checked {
        .md-bar {
            background: $secondary;
        }
        .md-thumb {
            background-color: $highlight;
        }
    }
}

.wfm-switch {
    //depricated remove as soon as possible
    position: relative;
    height: 24px;
    padding-top: 2px;

    label {
        vertical-align: middle;
    }

    input[type='checkbox'] {
        opacity: 0;
        height: 1px;
        width: 1px;
    }

    .wfm-switch-toggle {
        position: absolute;
        background-color: $gray-300;
        width: 48px;
        height: 18px;
        border-radius: 40px;
        transition: $transition-timing;
        margin: 2px 5px;
        cursor: pointer;
    }

    .wfm-switch-toggle:after {
        content: ' ';
        display: block;
        width: 12px;
        height: 12px;
        border-radius: 44px;
        cursor: pointer;
        position: absolute;
        top: 3px;
        z-index: 1;
        left: 5px;
        background-color: $white;
        transition: $transition-timing;
    }

    input[type='checkbox']:checked ~ label .wfm-switch-toggle {
        background-color: $blue-300;
    }

    input[type='checkbox']:checked ~ label .wfm-switch-toggle:after {
        left: 30px;
    }

    .wfm-switch-label {
        white-space: nowrap;
        cursor: pointer;
    }
}

//Slider
//
//The slider is used to input a range or value on a scale. It can be controlled with left and right arrow keys for greater accuracy if focused.
//
//Markup:
//<label>Generic:</label><md-slider flex min="0" max="10" aria-label="slider"></md-slider>
//<label>With label:</label><md-slider flex md-discrete min="0" max="100" aria-label="slider"></md-slider>
//<label>Vertical.</label><md-slider flex md-discrete min="0" max="100" aria-label="slider" md-vertical></md-slider>
//
//Styleguide 1.17
//

md-slider[md-vertical] .md-sign:after {
    border-left-color: $primary;
}

md-slider {
    .md-thumb {
        transform: scale(0.7) !important;
    }

    .md-slider-content {
        cursor: pointer;
    }

    .md-track-ticks {
        opacity: 0;
    }

    .md-track.md-track-fill,
    .md-thumb:after {
        background-color: $secondary !important;
        border-color: $secondary !important;
    }

    .md-sign {
        background-color: $primary;
    }
    .md-sign:after {
        border-top-color: $primary;
    }

    .md-min .md-thumb:after {
        background-color: $secondary;
    }

    .md-slider-wrapper:focus > .md-thumb {
        background-color: red !important;
    }
}

//Numeric value
//
//A directive for making an input[text] behave like an input[number].
//Locale-aware number strings (e.g. 1.234,01 in Swedish) entered directly into the input field are accepted as text and parsed manually with the correct ng-locale (using the correct group separator and decimal separator).
//The directive accepts the "float-number" tag attribute. Without it the input will only accept integer values.
//
//Markup: numericvalue.hbs
//
//Styleguide 2.12

wfm-multiple-search-input {
    display: inline-block;

    .wfm-multiple-search-wrapper {
        position: relative;
        height: auto;
    }

    .advanced-input {
        width: 200px;
        text-overflow: ellipsis !important;
        outline: none !important;
    }

    .search-icon {
        display: inline-block;
        vertical-align: bottom;
        &:focus {
            outline: rgb(0, 153, 255) solid 1px;
        }
        &:not(:focus) {
            outline: none !important;
        }
    }

    .advanced-input-dropdown {
        position: absolute;
        z-index: 115;
        top: 100%;
        left: 0;
        min-width: 313px;
    }

    .advanced-input-container {
        position: absolute;
        background-color: $white;
        z-index: 15;
        top: -11px;
        left: 18px;
    }

    .expand-advanced-input {
        max-width: 100%;
        width: 200px !important;
    }

    .focusing-search {
        color: $primary;
    }

    .focusing-search:before {
        font-weight: bold;
    }

    input[type='text'].advanced-search-field {
        padding: 0 4px !important;
    }

    @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none), (-ms-accelerator: true) {
        .advanced-input-dropdown > .con-row {
            display: block;
        }
    }

    @media screen and (max-width: 768px) {
        .advanced-search-field {
            width: calc(100% - 5px - 5px);
        }
    }
}

//Multiple search panel
//
//This Searchbar is placed inside the panel sub-header instead of a &lt;h2&gt; to provide advanced search capabilities in that panel.
//
//Note: The header text is translated in the project but the names of the inputs needs to be translated using $translate.instant() in the controller.
//
// <div class="jsprewrap">
//   <div class="ksscopy kss-style" ng-click="showJs['advSearch'] = !showJs['advSearch']">
//       <span ng-hide="showJs['advSearch']">Show</span>
//      <span ng-show="showJs['advSearch']">Hide</span>
//     JavaScript
//     <i class="mdi mdi-code-tags pull-right"></i>
//   </div>
//   <div class="animate-show" ng-show="showJs['advSearch']">
//     <code>
//       <pre class="prettyprint linenums lang-js">
//
//$scope.searchOptions = {
//    keyword: '',
//    searchKeywordChanged: false,
//    focusingSearch: false,
//    searchFields: [
//      'option1','option2','option3','option4','option5','option6'
//    ]
//};
//       </pre>
//     </code>
//   </div>
// </div>
//
//Markup: multiple-search.hbs
//
//Styleguide 4.5
