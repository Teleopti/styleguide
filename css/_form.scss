label {
  display: inline !important;
  font-weight: normal;
}

input[type='text'], [type='number'], input[type='password'], select{
  border: none;
  color: $text-color-standard;
  -webkit-appearance: none;
  -moz-appearance: none;
  background: none;
  line-height: 1;
  cursor: pointer;
  height: 20px;
  border-bottom: 1px solid $gray-300;

  &:focus {
    border: none;
    outline: none;
    border-bottom: 1px solid $blue-100;
  }
}

textarea{
	background-color: $white;
	color:$text-color-standard;
	resize:vertical;
	width:100%;
}

input::-ms-clear {
  display: none;
}

select:after {
  width: 0;
  height: 0;
  padding: 0;
  content: '';
  border-left: .25em solid transparent;
  border-right: .25em solid transparent;
  border-top: .375em solid red;
  pointer-events: none;
}

// Inputs
//
//Standard inputs dont need any added style. If you want to build a form with several inputs and actions on submit, please look at the <a href=section-4.html#kssref-4-4>form layout</a>.
//
//Note:  &lt;br/&gt; tags are for styleguide demo purpose only.
//
//Markup:
//	<input type="text" placeholder="Name..."  />
// <br/>
// <br/>
//	<input type="password" placeholder="Password..." />
// <br/>
// <br/>
//	<input type="number" placeholder="Numbers..." />
//
//Styleguide 1.3
//

// Input with prepend
//
//Inputs with prepend icon can be used when the input effects something that can easily be represented by an icon. This way we can rely on it taking up the same space in all languages.
//However, don't mix standard inputs and prepend ones. These inputs should have a placeholder and maybe a tooltip for explanation, since the icon is used in place of a label.
//
//Markup:
//<label for="filter" class="input-icon">
//  <i class="mdi mdi-filter-outline">
//    <input type="text" id="filter" placeholder="filter roles...">
//    <md-tooltip>Filter</md-tooltip>
//  </i>
//</label>
//
//Styleguide 1.3.1
//

.input-icon i{
	display: inline-flex;
  display: -ms-inline-flexbox;
	width:100%;
}
.input-icon input{
	margin-left: 5px;
  width: 100%;
  font-style: normal!important;
}

/*Deprecated*/
.input-prepend {
  width: 100%;

  i {
    display: inline-block;
    width: 18px;
    cursor: pointer;
    color: $gray087;

    &:before {
      vertical-align: sub;
    }
  }

  input[type='text'] {
    display: inline-block;
    width: auto;
  }
}

// File upload
//
//Let users import data from files to cuts down on a lot of maual entry.
//
//Markup:
//<label class="fileUpload">
//    <input id="uploadBtnId" type="file" class="upload" value="" onchange="javascript:document.getElementById('uploadFile').value = this.files[0].name;" />
//    <i class="mdi mdi-file-outline uploadBtn">
//		<md-tooltip>Import a file</md-tooltip>
//		</i>
//</label>
//<input id="uploadFile" class="disableInputField" disabled="disabled" value="No file selected" />
//
//Styleguide 1.3.2
//

.disableInputField {
  display: inline-block;
  background: none;
  border: none;
  outline: none;
  width: 50%;
  margin: 0;
  text-overflow: ellipsis;
}

.fileUpload {
  position: relative;
  overflow: hidden;
  display: inline-block;
  vertical-align: top;
}

.uploadBtn {
  display: inline-block;
  line-height: 22px;
  cursor: pointer;
  margin: 5px;
}

.fileUpload input.upload {
  position: absolute;
  top: 0;
  right: 0;
  width: 0;
  margin: 0;
  padding: 0;
  opacity: 0;
  filter: alpha(opacity = 0);
}

::-webkit-input-placeholder {
  /* WebKit browsers */
  color: $text-color-muted;
}

:-moz-placeholder {
  /* Mozilla Firefox 4 to 18 */
  color: $text-color-muted;
  opacity: 1;
}

::-moz-placeholder {
  /* Mozilla Firefox 19+ */
  color: $text-color-muted;
  opacity: 1;
}

input:-ms-input-placeholder {
  /* Internet Explorer 10+ */
  color: $text-color-muted;
}

/*Form validation*/
.wfm-form {
  label {
    cursor: pointer !important;
    color: $gray087;
    display: inline-block !important;
  }

  input, select {
    max-width: 100%;
    margin-right: 100%;
  }

  input > .ng-invalid {
    border-bottom: 5px solid red !important;
  }

  input[type="text"],
  input[type="number"],
  input[type="password"],
  input[type="email"] {
    padding: 0 0 0 4px !important;
  }

  select {
    padding: 0 0 0 0;
  }

  .form-input-message {
    opacity: 0;
    height: 0;
    transition: $transition-timing;
  }

  .formInvalidInput {
    opacity: 1;
    height: auto;
    color: red !important;
  }

  .form-input-wrap {
    padding: 10px 0;
  }

  .animate-input-message {
    line-height: 20px;
    height: auto;
    opacity: 1;
  }

  .animate-input-message.ng-hide-add, .animate-input-message.ng-hide-remove {
    transition: $transition-timing;
  }

  .animate-input-message.ng-hide {
    line-height: 0;
    height: 0;
    opacity: 0;
  }
}

.form-panel{
  overflow-x: hidden;
}

// Select
//
// The select is used to provide many options to the user and make complex selections simpler.
//
// Note: The ng-bind is for styleguide demo purpose only, use <span style="word-spacing: -4px;">{ {item} }</span> in the project.
//
// Markup:
//	<md-select ng-model="model" placeholder="Pick an option">
//		<md-option ng-repeat="item in demos" ng-value="item.id"><span ng-bind="item.id"></span></md-option>
//	</md-select>
//
//Styleguide 1.4
//

//z index needs to be higher than 81
.md-select-menu-container {
  background: $white !important;
  z-index: 140;

  .md-active {
    z-index: 150;
  }
}

md-select:not([disabled]):focus .md-select-value{
  border: none;
  outline: none;
  padding-bottom: 1px;
  border-bottom: 1px solid $blue-100;
}

.md-select-value>span:not(.md-select-icon){
	white-space: normal;
}

md-select-menu{
  md-select:not([disabled]):focus .md-select-value,
  md-option[selected],
  md-content {
    color: inherit!important;
  }
  md-option{
    height: 30px;
    color:$text-color-standard;

    &:hover {
      background-color: $gray-300;
    }
  }
  md-option:focus:not([disabled]):not([selected]),
  md-option[selected], md-select-menu md-option[selected]:focus {
    background-color: $green-100!important;
  }
}

md-select {
  margin: 0!important;

  .md-select-label {
    padding: 0;
    height: 21px;
  }

  &:not([disabled]):focus .md-select-value {
    color: inherit!important;
  }
}

.inline-select{
	margin-top:-5px!important;
	margin-left: 5px!important;
}

.bu-select{
  margin-top:-5px;
}

md-autocomplete{
  color: $gray087;
  background:transparent;
  height: 30px;
  border-bottom: 1px solid $gray-300;

  input:not(.md-input){
    padding: 0;
  }

  button:after{
    display: none;
  }

  button md-icon {
    transform: translate3d(-50%,-50%,0) scale(0.7);
  }
}

.md-whiteframe-1dp, .md-whiteframe-z1{
  box-shadow: none;
}

.md-virtual-repeat-scroller{
  background: $white;
}

md-autocomplete-parent-scope{
  color: $text-color-standard;
}
.md-autocomplete-suggestions >li {
  color: $text-color-standard;

  &:hover{
    background:$gray012!important;
  }
}

md-autocomplete[disabled]{
  background:$gray012;

  input{
    cursor: not-allowed!important;
  }
}

.wfm-form > md-autocomplete-wrap > input {
  margin-right: 0!important;
}

.md-autocomplete-suggestions-container li .highlight{
	color:$gray087 !important;
	font-weight: bold;
}

md-select-menu md-content md-option:not([disabled]):hover,
md-autocomplete[disabled]:not([md-floating-label]),
.md-autocomplete-suggestions-container li.selected {
	background: $gray012!important;
}

.md-virtual-repeat-container.md-autocomplete-suggestions-container { //for IE: clear buttom cause item list dont open
    height: 225.5px !important;
}

// Radio buttons
//
// Radio buttons are a group of options that can only have one item selected at a time.
//
//<div class="jsprewrap">
//	<div ng-click="showjs = !showjs" class="ksscopy">JavaScript</div>
//	<div ng-show="showjs">
//		<code><pre>
//	  $scope.demos = [{id: '1'}, {id: '2'}, {id: '3'}, {id: '4'}];
//		</pre></code>
//	</div>
//</div>
//
//Markup:
//	<form>
//		<div class="wfm-radio">
//			<input type="radio" name="group1" id="radio1" checked="true"/>
//			<label for="radio1">
//				<span class="wfm-radio-toggle"></span>
//				<span class="wfm-radio-label">This</span>
//			</label>
//		</div>
//		<div class="wfm-radio">
//			<input type="radio" name="group1" id="radio2" />
//			<label for="radio2">
//				<span class="wfm-radio-toggle"></span>
//				<span class="wfm-radio-label">That</span>
//			</label>
//		</div>
//	</form>
//	<h3>Using ng-repeat:</h3>
//	<form>
//		<div ng-repeat="item in demos">
//			<div class="wfm-radio">
//				<label>
//					<input type="radio" name="radio" value="value">
//					<span class="wfm-radio-toggle"></span>
//					<span class="wfm-radio-label">Im looped out!</span>
//				</label>
//			</div>
//		</div>
//	</form>
//
//Styleguide 1.6
//

.wfm-radio {
  @extend .wfm-block;

  input[type='radio'] {
    display: none;
  }

  .wfm-radio-toggle {
    position: absolute;
    background-color: $gray026;
    width: 20px;
    height: 20px;
    border-radius: 40px;
    -webkit-transition: background-color .2s ease-in-out;
    transition: background-color .2s ease-in-out;
    cursor: pointer;
  }

  input[type=radio]:checked ~ label .wfm-radio-toggle,
  input[type=radio]:checked ~ .wfm-radio-toggle {
    background-color: $blue-300;
  }

  .wfm-radio-label {
    margin-left: 20px + $full-padding;
    white-space: nowrap;
    cursor: pointer;
  }
}

//Checkboxes
//
//Checkboxes are used for selecting multiple input options.
//
//<div class="jsprewrap">
//	<div ng-click="showjs = !showjs" class="ksscopy">JavaScript</div>
//	<div ng-show="showjs">
//		<code><pre>
//	  $scope.demos = [{id: '1'}, {id: '2'}, {id: '3'}, {id: '4'}];
//		</pre></code>
//	</div>
//</div>
//
//Markup:
//	<form>
//		<div class="wfm-checkbox">
//			<input type="checkbox" id="check1" checked="true"/>
//			<label for="check1">
//				<span class="wfm-checkbox-toggle"></span>
//				<span class="wfm-checkbox-label">Check </span>
//			</label>
//		</div>
//		<div class="wfm-checkbox">
//			<input type="checkbox" id="check2" />
//			<label for="check2">
//				<span class="wfm-checkbox-toggle"></span>
//				<span class="wfm-checkbox-label">Check </span>
//			</label>
//		</div>
//	</form>
//	<h3>Using ng-repeat:</h3>
//	<form>
//		<div ng-repeat="item in demos">
//			<div class="wfm-checkbox">
//				<label>
//					<input type="checkbox" name="checkbox" value="value">
//					<span class="wfm-checkbox-toggle"></span>
//					<span class="wfm-checkbox-label">Im looped out!</span>
//				</label>
//			</div>
//		</div>
//	</form>
//
//Styleguide 1.7
//

.wfm-checkbox {
  @extend .wfm-block;

  input[type='checkbox'] {
    display: none;
  }

  .wfm-checkbox-toggle:after {
    position: absolute;
    background-color: $gray026;
    width: 20px;
    height: 20px;
    float: right;
    border-radius: 2px;
    content: " ";
    -webkit-transition: background-color .2s ease-in-out;
    transition: background-color .2s ease-in-out;
    cursor: pointer;
  }

  input[type=checkbox]:checked ~ label .wfm-checkbox-toggle:after,
  input[type=checkbox]:checked ~ .wfm-checkbox-toggle:after {
    background-color: $blue-300;
    content: "✓";
    text-align: center;
    color: $white;
  }

  input[type=checkbox]:focus ~ label .wfm-checkbox-toggle:after,
  input[type=checkbox]:focus ~ .wfm-checkbox-toggle:after {
    @extend .material-trench-1;
  }

  .wfm-checkbox-label {
    margin-left: 20px + $full-padding;
    white-space: nowrap;
    cursor: pointer;
  }
}

//Switch
//
// The switch is used to toggle between two states (for example show/hide, using <a href="http://goo.gl/M5U1oC">Angulars ng-show or ng-hide</a> to toggle other elements).
//
//Markup:
//	<div class="wfm-switch">
//		<input type="checkbox" id="switch1" />
//		<label for="switch1">
//			<span class="wfm-switch-label">Show selected items</span>
//			<span class="wfm-switch-toggle"></span>
//		</label>
//	</div>
//
//Styleguide 1.7.1
//

.wfm-switch {
  position: relative;
  height: 24px;
  padding-top: 2px;

  label {
    vertical-align: middle;
  }

  input[type='checkbox'] {
    display: none;
  }

  .wfm-switch-toggle {
    position: absolute;
    background-color: $gray-300;
    width: 48px;
    height: 18px;
    border-radius: 40px;
    -webkit-transition: background-color .2s ease-in-out;
    transition: background-color .2s ease-in-out;
    margin: 2px 5px;
    cursor: pointer;
  }

  .wfm-switch-toggle:after {
    content: "";
    display: block;
    width: 12px;
    height: 12px;
    border-radius: 44px;
    cursor: pointer;
    position: absolute;
    top: 3px;
    z-index: 1;
    left: 5px;
    background-color: $white;
    -webkit-transition: left .2s ease-in-out;
    transition: left .2s ease-in-out;
  }

  input[type=checkbox]:checked ~ label .wfm-switch-toggle {
    background-color: $blue-300;
  }

  input[type=checkbox]:checked ~ label .wfm-switch-toggle:after {
    left: 30px;
  }

  .wfm-switch-label {
    white-space: nowrap;
    cursor: pointer;
  }
}

//Slider
//
//The slider is used to input a range or value on a scale. It can be controlled with left and right arrow keys for greater accuracy if focused.
//
//Markup:
//<label>Generic:</label><md-slider flex min="0" max="10" aria-label="slider"></md-slider>
//<label>With label:</label><md-slider flex md-discrete min="0" max="100" aria-label="slider"></md-slider>
//<label>Vertical.</label><md-slider flex md-discrete min="0" max="100" aria-label="slider" md-vertical></md-slider>
//
//Styleguide 1.9
//

md-slider[md-vertical] .md-sign:after{
  border-left-color: $blue-500;
}

md-slider{

.md-thumb{
  transform: scale(0.7)!important;
}

.md-slider-content{
  cursor: pointer;
}

.md-track-ticks{
  opacity: 0;
}

.md-track.md-track-fill,
.md-thumb:after{
  background-color: $blue-300!important;
  border-color: $blue-300!important;
}

.md-sign{
  background-color:$blue-500;
}
.md-sign:after{
  border-top-color: $blue-500;
}

.md-min .md-thumb:after{
  background-color: $blue-300;
}

.md-slider-wrapper:focus > .md-thumb{
  background-color:red !important;
}

}

//Numeric value
//
//A directive for making an input[text] behave like an input[number].
//Locale-aware number strings (e.g. 1.234,01 in Swedish) entered directly into the input field are accepted as text and parsed manually with the correct ng-locale (using the correct group separator and decimal separator).
//The directive accepts the "float-number" tag attribute. Without it the input will only accept integer values.
//
//Markup: numericvalue.hbs
//
//Styleguide 2.8


wfm-multiple-search-input{
  .wfm-multiple-search-wrapper{
    position: relative;
    height: 20px;
  }

  .advanced-input{
    transition:2s width ease-in-out;
    width:138px;
    text-overflow: ellipsis!important;
  }

  .search-icon{
    display: inline-block;
    vertical-align: bottom;
  }

  .advanced-input-dropdown {
    position: absolute;
    z-index: 115;
    top: 20px;
    left: 0;
    min-width: 313px;
  }

  .advanced-input-container {
    position: absolute;
    background-color: $white;
    z-index: 15;
    top: -11px;
    left: 18px;
  }

  .expand-advanced-input{
    max-width: 75%;
    width:313px!important;
  }

  .focusing-search {
    color: $blue-500;
  }

  .search-button {
    float: right;
  }
}

//Multiple search
//
//This Searchbar is placed inside the panel sub-header instead of a &lt;h2&gt; to provide advanced search capabilities in that panel.
//
//Note: The header text is translated in the project but the names of the inputs needs to be translated using $translate.instant() in the controller.
//
//<div class="jsprewrap">
//	<div ng-click="showjs = !showjs" class="ksscopy">JavaScript</div>
//	<div ng-show="showjs">
//		<code><pre>
//$scope.searchOptions = {
//    keyword: '',
//    searchKeywordChanged: false,
//    focusingSearch: false,
//    searchFields: [
//      'option1','option2','option3','option4','option5','option6'
//    ]
//};
//		</pre></code>
//	</div>
//</div>
//
//Markup: multiple-search.hbs
//
//Styleguide 4.2.1
