// Data Grid With Multi-selection
//
//Display list data in a square grid. User can select multiple cells from the grid. This is done by dragging the mouse across the target cells, or by holding the <code>Ctrl</code> key to add other cells to the already selected cells. 
//<ul>
//<li>Specifications for selectable-data-grid:  
//<table class="wfm-table">
//<tr><th>Attribute Name</th><th>Usage</th><th>Required</th></tr>  
//<tr><td>record-items</td><td>specify the list data to be bound to the grid.</td><td>true</td></tr>
//<tr><td>items-per-row</td><td>specify the numer of items per row</td><td>true</td></tr>
//<tr><td>grid-headers</td><td>specify the header labels for the grid</td><td>false</td></tr>
//<tr><td>starting-offset</td><td>specify the offset of the first grid row. Used to align data with the headers.</td><td>false</td></tr>
//<tr><td>inject</td><td>Inject properties of the current scope to the scope of selectable-data-grid-cell.</td><td>false</td></tr>  
//<tr><td>mute</td><td>disable interaction with the entire grid.</td><td>false</td></tr>  
//</table>
//The selected data items will have their <code>isSelected</code> attribute set to true, which can be used for further manipulation.
//<p>The selectable-data-grid exposes the following cell-specific entities to the scope of each selectable-data-grid-cell:
//<ul class="wfm-simple-list">
//<li><code>$item</code>&nbsp;: the data object binding to the current cell.</li>
//<li><code>$colIndex</code>&nbsp;: the column index of the current cell.</li>
//<li><code>$rowIndex</code>&nbsp;: the row index of the current cell.</li>
//</ul> 
//</p>
//</li>
//
//<li>
//Specifications for selectable-data-grid-cell:
//<table class="wfm-table">
//<tr><th>Attribute Name</th><th>Usage</th><th>Required</th></tr>
//<tr><td>unselectable</td><td>An expression telling whether the cell should be unselectable.</td><td>false</td></tr>  
//</table>
//</li>
//The html specified in this element is used to render the content of each grid cell.
//Each grid cell has an isolated scope populated with the injected properties and cell-specific entities from its parent. These can be used in both the html template and the attribute expression.  
//</ul>
//  
//Markup: datagrid.hbs
//
//Styleguide 2.5
//    

// Calendar data updater
//
//For a date-data-series of the form <code>{ date: .., value: .. }</code> with continuous dates, it can be displayed in a calendar through this directive.
//The calendar supports multi-selection and in-place update. Use mouse and <code>Ctrl</code> key to specify multiple data, and use <code>Alt</code> to update their values. Use <code>Enter</code> and <code>Esc</code> to confirm or cancel the input.
//
//This directive uses selectable-data-grid at its core, and demonstrates its extensibility.  
//<ul>
//<li>Specifications for calendar-data-updater:
//<table class="wfm-table">
//<tr><th>Attribute Name</th><th>Usage</th><th>Required</th></tr>
//<tr><td>date-records</td><td>specify the date-data-series to be bound to the calendar</td><td>true</td></tr>
//<tr><td>start-of-week</td><td>specify the starting week day.</td><td>false</td></tr>
//<tr><td>weekday-names</td><td>specify the array of week day names; start with Sunday</td><td>false</td></tr>
//</table>    
//</ul>    
//
//Markup:
//<calendar-data-updater date-records="dateRecords" start-of-week="1"></calendar-data-updater>
//
//Styleguide 2.6
  




.selectable-data-grid {

  cursor: pointer;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;

  .selectable-data-grid-cell {
    display: block;
    height: 100%;
    width: 100%;
    position: relative;
  }

  td {
    &.selected {
      background-color: $blue-100!important;
    }
        
    width: 5%;
    height: 42px;
    text-align: center;
    vertical-align: middle;
  }

  .ng-unselectable {
    background-color: $gray012;   		    
  }
}

.calendar-data-updater {
  .selectable-data-grid {
    .selectable-data-grid-cell {
      display: flex !important;
      justify-content: left;
      align-content: baseline;
    }    
  }

  .input-flipper {
    width: 50px;
    display: flex;
    justify-content: left;
    align-items: flex-end;
   
    &:hover {
      @extend .material-depth-1;      
    }

    input {
      width: 50px;
      height: 28px;
      padding-left: 10px;
    }
      
    div {
      width: 50px;
      padding: 4px 5px;
    }
  }
    
  .placeholder {
    width: 20%;    
  }

  .day-month-flipper {
    transition: all 0.5s;
    
    width: 30px;
    height: 30px;		
    border-radius: 50%;
    box-sizing: content-box;
    transform-style: preserve-3d;
    transform-origin: 50% 50%;
    &:hover {
      transform: rotateY(180deg);
    }
  }

  .calendar-icon {		
    position: absolute;
    backface-visibility: hidden;
    padding: 6px 3px;
    width: 30px;
    height: 30px;				
    border-radius: 50%;
  }

  .day-icon {
    @extend .calendar-icon;			  	
    transform: translateZ(-1px);		
  }

  .month-icon {
    @extend .calendar-icon;				
    transform: translateZ(1px) rotateY(180deg);			
  }

  .disable-default-select {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }
    
  @for $i from 1 through 12 {
    .month-#{$i} {
      @if $i % 2 == 0 { background-color: #FFCC80; }
      @if $i % 2 == 1 { background-color: #B9F6CA; }
    }
  }
    
}  
